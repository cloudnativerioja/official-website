name: 'Release'

on:
  push:
    tags:
      - '*'

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: docker.io

  IMAGE_NAME: cloudnativerioja/official-website

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: 'Determine tag'
        run: 'echo "RELEASE_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV'
      - name: Build the Docker image
        run: docker build . -t cloudnativerioja/official-website:${{ env.RELEASE_TAG }}
      - name: Run the Docker image
        run: docker run -d -p 8080:80 cloudnativerioja/official-website:${{ env.RELEASE_TAG }}
      - name: Test the Docker image
        run: curl -sSf localhost:8080 | grep -q 'Cloud Native Rioja'

  push_to_registry:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: [build-and-test]
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: 'Determine tag'
        run: 'echo "RELEASE_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: cloudnativerioja/official-website:${{ env.RELEASE_TAG }}

  release:
    name: 'Release'

    runs-on: 'ubuntu-latest'

    needs: [push_to_registry]
    steps:
      - name: 'Determine tag'
        run: 'echo "RELEASE_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV'

      # https://github.com/actions/checkout
      - uses: actions/checkout@v3

      - name: 'Create release'
        uses: 'actions/github-script@v5'
        with:
          github-token: '${{ secrets.GITHUB_TOKEN }}'
          script: |
            try {
              await github.rest.repos.createRelease({
                draft: false,
                generate_release_notes: true,
                name: process.env.RELEASE_TAG,
                owner: context.repo.owner,
                prerelease: false,
                repo: context.repo.repo,
                tag_name: process.env.RELEASE_TAG,
              });
            } catch (error) {
              core.setFailed(error.message);
            }
